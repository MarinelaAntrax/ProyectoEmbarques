@{
        ViewBag.Title = "Sumario ";
}
<script src="~/Scripts/sweetalert2.all.js"></script>
<script src="~/Scripts/jszip.min.js"></script>
<link rel="stylesheet" href="~/Content/sweetalert2.css">
<div id="dialog"></div>
<script type="x/kendo-template" id="page-template">
    <div class="page-template">
        <div class="header">
            <div style="float: right"><span class="date">Date:@DateTime.Now.ToShortDateString()</span>Page #: pageNum # of #: totalPages #</div>
            BAE Systems - Pull Test
        </div>
        <div class="watermark">Propiedad de<br />BAE Systems</div>
        <div class="footer">
            Page #: pageNum # of #: totalPages #
        </div>
    </div>
</script>
<h2 class="page-header">@ViewBag.Title de Embarques</h2>
<div class="telerik-controls">
    @(Html.Kendo().Grid<ProyectoEmbarques.Models.Shipping_RecordsViewModel>()
            .Name("grid")
            .Selectable()
            .ToolBar(tools =>
            {
                    tools.Template(@<text>
                        <a class="k-button k-button-icontext" href="#" data-toggle="modal" data-target="#exampleModalCenter"><span class="k-icon k-i-pdf"></span>PackingList</a>
                        <a class="k-button k-button-icontext k-grid-excel" href="#"><span class="k-icon k-i-excel"></span>Exportar a Excel</a>
                        @item.SaveButton()
                        <div class="toolbar">
                            <label class="category-label"> De </label>
                            @(Html.Kendo().DatePicker()
                                    .Name("Inicio")
                                    .Value(DateTime.Today)
                                    .Min("07/23/2018")
                                    .HtmlAttributes(new { style = "width: 150px;" }) )
                            <label class="category-label"> &nbsp;&nbsp;&nbsp; a &nbsp;&nbsp;&nbsp; </label>
                            @(Html.Kendo().DatePicker()
                                    .Name("Final")
                                    .Value(DateTime.Today.AddDays(1))
                                    .Min("07/23/2018")
                                    .HtmlAttributes(new { style = "width: 150px;" }) )
                            <a id="btnSearch" class="k-button k-button-icontext" href="#"><span class="glyphicon glyphicon-search"></span> Buscar</a>
                        </div>
                    </text>);
                    })
                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                            .Pageable(x => x.Numeric(true)
                            .PreviousNext(true)
                            .Refresh(true)
                            .ButtonCount(5))
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .Model(model =>
                            {
                                model.Id(id => id.RecordID);
                                model.Field(id => id.RecordID).DefaultValue(9999);
                                model.Field(Fie => Fie.RecordTransfer).Editable(true);
                                model.Field(Fie => Fie.RecordDate).Editable(false);
                                model.Field(Fie => Fie.Shipping_Catalog_Products.ProductName).Editable(false);
                                model.Field(Fie => Fie.Shipping_Catalog_Products.AreaName).Editable(false);
                                model.Field(Fie => Fie.Clients.ClientName).Editable(false);
                                model.Field(Fie => Fie.Clients.ClientAddress).Editable(false);
                                model.Field(Fie => Fie.RecordWorkOrder).Editable(false);
                                model.Field(Fie => Fie.RecordTrackingId).Editable(false);
                                model.Field(Fie => Fie.RecordSerialNo).Editable(false);
                                model.Field(Fie => Fie.RecordQuantity).Editable(false);
                                model.Field(Fie => Fie.RecordFedexTracking).Editable(false);
                                model.Field(Fie => Fie.RecordControlBoxNo).Editable(false);
                                model.Field(Fie => Fie.RecordPieceBoxNo).Editable(false);
                                model.Field(Fie => Fie.CatalogShipmentType.ShipmentType).Editable(false);
                                model.Field(Fie => Fie.RecordSeguritySeal1).Editable(false);
                                model.Field(Fie => Fie.RecordSeguritySeal2).Editable(false);
                                model.Field(Fie => Fie.RecordSeguritySeal3).Editable(false);
                                model.Field(Fie => Fie.RecordSeguritySeal4).Editable(false);
                                model.Field(Fie => Fie.RecordComment).Editable(false);
                                model.Field(Fie => Fie.RecordComment1).Editable(false);
                                model.Field(Fie => Fie.RecordComment2).Editable(false);
                                model.Field(Fie => Fie.RecordRework).Editable(false);
                                model.Field(Fie => Fie.RecordFAI).Editable(false);
                                model.Field(Fie => Fie.RecordServiceType).Editable(false);
                            })
                            .Update(up => up.Action("Update", "EnsamblesRealizados"))
                            .Read(read => read.Action("Read", "EnsamblesRealizados").Data("FilterByDate"))
                            .PageSize(100)
                                )
                                .Columns(columns =>
                                {
                                    columns.Bound(o => o.RecordDate).Width(110).Filterable(false);
                                    columns.Bound(o => o.Shipping_Catalog_Products.ProductName).Width(180);
                                    columns.Bound(o => o.Shipping_Catalog_Products.AreaName).Width(150);
                                    columns.Bound(o => o.Clients.ClientName).Title("Attn").Width(210);
                                    columns.Bound(o => o.Clients.ClientAddress).Title("Org").Width(150);
                                    columns.Bound(o => o.RecordWorkOrder).Width(150);
                                    columns.Bound(o => o.RecordTrackingId).Width(150);
                                    columns.Bound(o => o.RecordSerialNo).Width(150);
                                    columns.Bound(o => o.RecordQuantity).Width(150);
                                    columns.Bound(o => o.RecordFedexTracking).Width(130);
                                    columns.Bound(o => o.RecordControlBoxNo).Width(150);
                                    columns.Bound(o => o.RecordPieceBoxNo).Width(140);
                                    columns.Bound(o => o.CatalogShipmentType.ShipmentType).Width(140);
                                    columns.Bound(o => o.RecordSeguritySeal1).Width(140);
                                    columns.Bound(o => o.RecordSeguritySeal2).Width(140);
                                    columns.Bound(o => o.RecordSeguritySeal3).Width(140);
                                    columns.Bound(o => o.RecordSeguritySeal4).Width(140);
                                    columns.Bound(o => o.RecordComment).Width(200);
                                    columns.Bound(o => o.RecordComment1).Width(200);
                                    columns.Bound(o => o.RecordComment2).Width(200);
                                    columns.Bound(o => o.RecordRework).Width(120);
                                    columns.Bound(o => o.RecordFAI).Width(130);
                                    columns.Bound(o => o.RecordServiceType).Width(140);
                                    columns.Bound(o => o.RecordTransfer).Width(150);
                                })
                        .Excel(excel => excel.FileName("Reportes - EMBARQUES (" + DateTime.Now.ToString("dd-MMM-yyyy") + ").xlsx").AllPages(true))
                        .Scrollable()
                        .Resizable(resize => resize.Columns(true))
                        .Reorderable(reordable => reordable.Columns(true))
                        .Sortable()
                        .Pageable()
                        .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                        .Groupable()
                        .ColumnMenu()
                        .HtmlAttributes(new { style = "height: 650px" })
    )
</div>
@using (Html.BeginForm("PackingList", "Reportes"))
{
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Packing List</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body py-5">
                    <div class="col-xs-6">
                        <div class="form-group py-5">
                            <h4>Ingrese el Tracking de Fedex</h4>
                            @(Html.Kendo().AutoComplete()
                                                                            .Name("ParametroFedex")
                                                                            .DataTextField("RecordFedexTracking")
                                                                            .Filter(FilterType.Contains)
                                                                            .DataSource(source =>
                                                                            {
                                                                                source.Read(read =>
                                                                                { read.Action("FillCombobox", "Reportes"); })
                                                                                    .ServerFiltering(false);
                                                                            })
                                                                            .HtmlAttributes(new { style = "width:90%;" })
                                                                            .Template("<i class='fa fa-sitemap' aria-hidden='true'></i><div class=\"k-state-default\" style=\"display: inline-block; \">#:data.RecordFedexTracking" + " #</div>") )
                        </div>
                    </div>
                    <br /><br />
                </div><br /><br />
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    <input type="submit" value="Generar" class="k-button k-primary" style="width: 20%; height:40px" />
                </div>
            </div>
        </div>
    </div>
}
@*<div class="demo-section k-content wide">
        @(Html.Kendo().Chart<Embarques.Models.GraficaViewModel>()
                                            .Name("chart")
                                            .Title("Total de Embarques")
                                            .Legend(legend => legend
                                                .Position(ChartLegendPosition.Top)
                                            )
                                            .DataSource(ds => ds.Read(read => read.Action("Read_Grafica", "EnsamblesRealizados")))
                                            .Series(series =>
                                            {
                                                series.Column(model => model.Date).Name("Max");
                                            })
                                            .CategoryAxis(axis => axis
                                                .Labels(labels => labels.Rotation("auto"))
                                                .Categories(cat => cat.contador)
                                                .MajorGridLines(lines => lines.Visible(false))
                                            )
                                            .ValueAxis(axis => axis.Numeric().MajorUnit(10).Max(100).Min(0))
                                            .Tooltip(tooltip => tooltip
                                                .Visible(true)
                                            )
        )
    </div>*@
<script>
    function FilterByDate() {
        return {
            starDate: $("#Inicio").val(),
            endDate: $("#Final").val()
        };
    }
    $('#btnSearch').on("click", function (e) {
        $("#grid").data("kendoGrid").dataSource.read();
        return false;
    });
</script>
<style>
    #grid .k-grid-toolbar {
        padding: .75em 1.3em .8333em 1em;
    }
    .toolbar {
        float: right;
    }
    .indicador-Columna {
        background-color: #fdd;
    }
</style>

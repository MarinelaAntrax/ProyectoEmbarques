@{
    ViewBag.Title = "Sumario ";
}
<script src="~/Scripts/sweetalert2.all.js"></script>
<script src="~/Scripts/jszip.min.js"></script>

<link rel="stylesheet" href="~/Content/sweetalert2.css">

<div id="dialog"></div>

<script type="x/kendo-template" id="page-template">
    <div class="page-template">
        <div class="header">
            <div style="float: right"><span class="date">Date:@DateTime.Now.ToShortDateString()</span>Page #: pageNum # of #: totalPages #</div>
            BAE Systems - Pull Test
        </div>
        <div class="watermark">Propiedad de<br />BAE Systems</div>
        <div class="footer">
            Page #: pageNum # of #: totalPages #
        </div>
    </div>
</script>

<h2 class="page-header">@ViewBag.Title de Embarques</h2>
<div class="telerik-controls">
    @(Html.Kendo().Grid<ProyectoEmbarques.Models.Shipping_RecordsViewModel>()
                                            .Name("grid")
                                            .Selectable()
                                            .ToolBar(tools =>
                                                {
                                                    tools.Template(@<text>
                                                        <a class="k-button k-button-icontext k-grid-pdf" href="#"><span class="k-icon k-i-pdf"></span>Exportar a Pdf</a>
                                                        <a class="k-button k-button-icontext k-grid-excel" href="#"><span class="k-icon k-i-excel"></span>Exportar a Excel</a>
                                                        <div class="toolbar">
                                                            <label class="category-label"> De </label>
                                                            @(Html.Kendo().DatePicker()
                                                                    .Name("Inicio")
                                                                    .Value(DateTime.Today)
                                                                    .Min("07/23/2018")
                                                                    .HtmlAttributes(new { style = "width: 150px;" }) )
                                                            <label class="category-label"> &nbsp;&nbsp;&nbsp; a &nbsp;&nbsp;&nbsp; </label>
                                                            @(Html.Kendo().DatePicker()
                                                                    .Name("Final")
                                                                    .Value(DateTime.Today.AddDays(1))
                                                                    .Min("07/23/2018")
                                                                    .HtmlAttributes(new { style = "width: 150px;" }) )
                                                            <a id="btnSearch" class="k-button k-button-icontext" href="#"><span class="glyphicon glyphicon-search"></span> Buscar</a>
                                                        </div>
                                                    </text>);
                                                })
                                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                    .Pageable(x => x.Numeric(true)
                                                    .PreviousNext(true)
                                                    .Refresh(true)
                                                    .ButtonCount(5))
                                                    .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .Model(model =>
                                                    {
                                                        model.Id(id => id.RecordID);
                                                        model.Field(id => id.RecordID).DefaultValue(9999);
                                                        model.Field(Fie => Fie.RecordTransfer).Editable(true);
                                                        model.Field(Fie => Fie.RecordDate).Editable(false);
                                                        model.Field(Fie => Fie.Shipping_Catalog_Products.ProductName).Editable(false);
                                                        model.Field(Fie => Fie.Shipping_Catalog_Products.AreaName).Editable(false);
                                                        model.Field(Fie => Fie.Clients.ClientName).Editable(false);
                                                        model.Field(Fie => Fie.Clients.ClientAddress).Editable(false);
                                                        model.Field(Fie => Fie.RecordWorkOrder).Editable(false);
                                                        model.Field(Fie => Fie.RecordTrackingId).Editable(false);
                                                        model.Field(Fie => Fie.RecordSerialNo).Editable(false);
                                                        model.Field(Fie => Fie.RecordQuantity).Editable(false);
                                                        model.Field(Fie => Fie.RecordFedexTracking).Editable(false);
                                                        model.Field(Fie => Fie.RecordControlBoxNo).Editable(false);
                                                        model.Field(Fie => Fie.RecordPieceBoxNo).Editable(false);
                                                        model.Field(Fie => Fie.CatalogShipmentType.ShipmentType).Editable(false);
                                                        model.Field(Fie => Fie.RecordSeguritySeal1).Editable(false);
                                                        model.Field(Fie => Fie.RecordSeguritySeal2).Editable(false);
                                                        model.Field(Fie => Fie.RecordSeguritySeal3).Editable(false);
                                                        model.Field(Fie => Fie.RecordSeguritySeal4).Editable(false);
                                                        model.Field(Fie => Fie.RecordComment).Editable(false);
                                                        model.Field(Fie => Fie.RecordComment1).Editable(false);
                                                        model.Field(Fie => Fie.RecordComment2).Editable(false);
                                                        model.Field(Fie => Fie.RecordRework).Editable(false);
                                                        model.Field(Fie => Fie.RecordFAI).Editable(false);
                                                        model.Field(Fie => Fie.RecordServiceType).Editable(false);
                                                    })
                                                    .Events(events => events.Error("error_handler"))
                                                    .Update(up=>up.Action("Update", "EnsamblesRealizados"))
                                                    .Read(read => read.Action("Read", "EnsamblesRealizados").Data("FilterByDate"))
                                                    .PageSize(100)
                                                        )
                                                        .Columns(columns =>
                                                        {
                                                            columns.Bound(o => o.RecordDate).Width(110).Filterable(false);
                                                            columns.Bound(o => o.Shipping_Catalog_Products.ProductName).Width(180);
                                                            columns.Bound(o => o.Shipping_Catalog_Products.AreaName).Width(150);
                                                            columns.Bound(o => o.Clients.ClientName).Title("Attn").Width(210);
                                                            columns.Bound(o => o.Clients.ClientAddress).Title("Org").Width(150);
                                                            columns.Bound(o => o.RecordWorkOrder).Width(150);
                                                            columns.Bound(o => o.RecordTrackingId).Width(150);
                                                            columns.Bound(o => o.RecordSerialNo).Width(150);
                                                            columns.Bound(o => o.RecordQuantity).Width(150);
                                                            columns.Bound(o => o.RecordFedexTracking).Width(130);
                                                            columns.Bound(o => o.RecordControlBoxNo).Width(150);
                                                            columns.Bound(o => o.RecordPieceBoxNo).Width(140);
                                                            columns.Bound(o => o.CatalogShipmentType.ShipmentType).Width(140);
                                                            columns.Bound(o => o.RecordTransfer).Width(150);
                                                            columns.Bound(o => o.RecordSeguritySeal1).Width(140);
                                                            columns.Bound(o => o.RecordSeguritySeal2).Width(140);
                                                            columns.Bound(o => o.RecordSeguritySeal3).Width(140);
                                                            columns.Bound(o => o.RecordSeguritySeal4).Width(140);
                                                            columns.Bound(o => o.RecordComment).Width(200);
                                                            columns.Bound(o => o.RecordComment1).Width(200);
                                                            columns.Bound(o => o.RecordComment2).Width(200);
                                                            columns.Bound(o => o.RecordRework).Width(120);
                                                            columns.Bound(o => o.RecordFAI).Width(130);
                                                            columns.Bound(o => o.RecordServiceType).Width(140);
                                                            columns.Command(com => com.Edit().Text("Edit")).Title("Editar").Width(125);
                                                        })

                                                .Excel(excel => excel.AllPages(true))
                                                .Scrollable()
                                                
                                                .Resizable(resize => resize.Columns(true))
                                                .Reorderable(reordable => reordable.Columns(true))
                                                .Sortable()
                                                .Pageable()
                                                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                                                .Groupable()
                                                .HtmlAttributes(new { style = "height: 700px" })
                                                )
</div>

<script>
    function FilterByDate() {
        return {
            starDate: $("#Inicio").val(),
            endDate: $("#Final").val()
        };
    }
    $('#btnSearch').on("click", function (e) {
        $("#grid").data("kendoGrid").dataSource.read();
        return false;
    });</script>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>

<style>
    #grid .k-grid-toolbar {
        padding: .75em 1.3em .8333em 1em;
    }

    .toolbar {
        float: right;
    }

    .detalle-reporte-image {
        border: 1px solid #eaeaeb;
        vertical-align: middle;
        box-sizing: content-box;
    }

    .detalle-reporte-wrapper {
        vertical-align: middle;
        margin: 20px;
    }

        .detalle-reporte-wrapper h5 {
            font-size: 11px;
            color: #F26521;
            vertical-align: middle;
            top: 20%;
            position: relative;
            margin-bottom: 20px;
        }

    #grid .k-grid-toolbar {
        padding: .75em 1.3em .8333em 1em;
    }

    .toolbar {
        float: right;
    }

    .detalle-reporte > ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

    .detalle-reporte ul li {
        margin: 0;
        line-height: 1.7em;
    }

    .detalle-reporte label {
        display: inline-block;
        width: 110px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
        color: #F26521;
    }

    .indicador-Columna {
        background-color: #fdd;
    }
</style>